{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/Anusha/Documents/Collectbot/imp/prima-erp/frontend/app/api/customers/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\n\nconst BACKEND_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';\n\nexport async function GET(request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const queryString = searchParams.toString();\n    \n    const response = await fetch(`${BACKEND_URL}/api/customers?${queryString}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Cookie': request.headers.get('cookie') || '',\n      },\n      credentials: 'include',\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      return NextResponse.json(errorData, { status: response.status });\n    }\n\n    const data = await response.json();\n    return NextResponse.json(data);\n  } catch (error) {\n    console.error('Error proxying customers request:', error);\n    return NextResponse.json(\n      { message: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request) {\n  try {\n    const body = await request.json();\n    \n    const response = await fetch(`${BACKEND_URL}/api/customers`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Cookie': request.headers.get('cookie') || '',\n      },\n      credentials: 'include',\n      body: JSON.stringify(body),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      return NextResponse.json(errorData, { status: response.status });\n    }\n\n    const data = await response.json();\n    return NextResponse.json(data);\n  } catch (error) {\n    console.error('Error proxying customers POST request:', error);\n    return NextResponse.json(\n      { message: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,cAAc,6DAAmC;AAEhD,eAAe,IAAI,OAAO;IAC/B,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,cAAc,aAAa,QAAQ;QAEzC,MAAM,WAAW,MAAM,MAAM,GAAG,YAAY,eAAe,EAAE,aAAa,EAAE;YAC1E,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,UAAU,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;YAC7C;YACA,aAAa;QACf;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,OAAO,gJAAY,CAAC,IAAI,CAAC,WAAW;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAChE;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,MAAM,WAAW,MAAM,MAAM,GAAG,YAAY,cAAc,CAAC,EAAE;YAC3D,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,UAAU,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;YAC7C;YACA,aAAa;YACb,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,OAAO,gJAAY,CAAC,IAAI,CAAC,WAAW;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAChE;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0CAA0C;QACxD,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}